services:
  db:
    image: mysql:8.0
    container_name: knockbank-db
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - mysql-db:/var/lib/mysql

    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "${DB_USER}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    container_name: knockbank-api
    ports:
      - "8000:8000"
    build: 
      context: ./server
    volumes:
      - ./server/src:/app # Kodunuzu senkronize eder

    environment:
      TOKEN_SECRET: ${JWT_SECRET}
      SHOW_SQL: 'false'
      SQLALCHEMY_DATABASE_URI: 'mysql+mysqlconnector://${DB_USER}:${DB_PASSWORD}@db:3306/${DB_NAME}'

    depends_on:
      db:
        condition: service_healthy

# docker-compose.yml

  web:
    container_name: knockbank-web
    build: 
      context: ./client
      # Tell Docker to use our new development-specific Dockerfile
      dockerfile: Dockerfile.dev
    
    volumes:
      # 1. Mount the local ./client directory to the /app directory in the container.
      #    This is how hot-reloading sees your file changes.
      - ./client:/app
      
      # 2. Prevent the local node_modules from overriding the container's. VERY IMPORTANT!
      - /app/node_modules
    
    # 3. Explicitly tell the container to run the development server.
    #    This overrides the CMD in the Dockerfile.
    command: yarn run dev
    
    ports:
      - "3000:3000"
      
    environment:
      # This helps the file watcher work correctly inside Docker
      CHOKIDAR_USEPOLLING: 'true' 
      NEXT_PUBLIC_API_URL: 'http://localhost:8000/api'
      NEXT_PRIVATE_API_URL: 'http://api:8000/api'
      NEXTAUTH_URL: 'http://localhost:3000'
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
    depends_on:
      - api

volumes:
  mysql-db:
